name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        fi
        
    - name: Inject EmailJS Configuration
      run: |
        echo "Injecting EmailJS configuration..."
        echo "Service ID length: ${#EMAILJS_SERVICE_ID}"
        echo "Template ID length: ${#EMAILJS_TEMPLATE_ID}" 
        echo "Public Key length: ${#EMAILJS_PUBLIC_KEY}"
        
        # Check if secrets are available
        if [ -z "$EMAILJS_SERVICE_ID" ] || [ -z "$EMAILJS_TEMPLATE_ID" ] || [ -z "$EMAILJS_PUBLIC_KEY" ]; then
          echo "ERROR: One or more EmailJS secrets are missing!"
          exit 1
        fi
        
        # Create a temporary config injection file
        cat > temp_inject.py << 'EOF'
import re
import sys
import os

# Read the HTML file
with open('index.html', 'r', encoding='utf-8') as f:
    html_content = f.read()

# Get environment variables
service_id = os.environ.get('EMAILJS_SERVICE_ID', '')
template_id = os.environ.get('EMAILJS_TEMPLATE_ID', '')
public_key = os.environ.get('EMAILJS_PUBLIC_KEY', '')

# Create config script
config_script = f'''<script>
window.EMAIL_CONFIG = {{
  "EMAILJS_SERVICE_ID": "{service_id}",
  "EMAILJS_TEMPLATE_ID": "{template_id}",
  "EMAILJS_PUBLIC_KEY": "{public_key}"
}};
</script>'''

# Find and replace the EmailJS script tag
pattern = r'<script src="https://cdn\.jsdelivr\.net/npm/@emailjs/browser@4/dist/email\.min\.js"></script>'
replacement = config_script + '\n    <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js"></script>'

new_html = re.sub(pattern, replacement, html_content)

# Write back to file
with open('index.html', 'w', encoding='utf-8') as f:
    f.write(new_html)

# Verify injection
if 'EMAIL_CONFIG' in new_html:
    print("✓ EmailJS configuration injected successfully")
else:
    print("✗ Failed to inject EmailJS configuration")
    sys.exit(1)
EOF
        
        python3 temp_inject.py
        rm temp_inject.py
        
        # Verify the injection worked
        if grep -q "EMAIL_CONFIG" index.html; then
          echo "✓ Configuration injection verified"
        else
          echo "✗ Configuration injection failed"
          exit 1
        fi
      env:
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
