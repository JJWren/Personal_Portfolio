name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        fi
        
    - name: Inject EmailJS Configuration
      run: |
        # Create configuration script injection using sed
        echo "Injecting EmailJS configuration..."
        echo "Service ID: ${EMAILJS_SERVICE_ID:0:10}..."
        echo "Template ID: ${EMAILJS_TEMPLATE_ID:0:10}..."
        echo "Public Key: ${EMAILJS_PUBLIC_KEY:0:10}..."
        
        # Create config script
        CONFIG_SCRIPT="<script>window.EMAIL_CONFIG = {\"EMAILJS_SERVICE_ID\":\"$EMAILJS_SERVICE_ID\",\"EMAILJS_TEMPLATE_ID\":\"$EMAILJS_TEMPLATE_ID\",\"EMAILJS_PUBLIC_KEY\":\"$EMAILJS_PUBLIC_KEY\"};</script>"
        
        # Insert config before EmailJS script using sed
        sed -i "s|<script src=\"https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js\"></script>|$CONFIG_SCRIPT\n    <script src=\"https://cdn.jsdelivr.net/npm/@emailjs/browser@4/dist/email.min.js\"></script>|" index.html
        
        echo "Configuration injected successfully"
        grep -n "EMAIL_CONFIG" index.html || echo "Warning: EMAIL_CONFIG not found in HTML"
      env:
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
