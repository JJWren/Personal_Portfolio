name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        fi
        
    - name: Inject EmailJS Configuration
      run: |
        echo "=== EmailJS Configuration Injection ==="
        echo "Checking secrets availability..."
        
        if [ -z "$EMAILJS_SERVICE_ID" ]; then
          echo "❌ EMAILJS_SERVICE_ID is missing"
          exit 1
        else
          echo "✅ EMAILJS_SERVICE_ID is available (length: ${#EMAILJS_SERVICE_ID})"
        fi
        
        if [ -z "$EMAILJS_TEMPLATE_ID" ]; then
          echo "❌ EMAILJS_TEMPLATE_ID is missing"
          exit 1
        else
          echo "✅ EMAILJS_TEMPLATE_ID is available (length: ${#EMAILJS_TEMPLATE_ID})"
        fi
        
        if [ -z "$EMAILJS_PUBLIC_KEY" ]; then
          echo "❌ EMAILJS_PUBLIC_KEY is missing"
          exit 1
        else
          echo "✅ EMAILJS_PUBLIC_KEY is available (length: ${#EMAILJS_PUBLIC_KEY})"
        fi
        
        echo "Creating configuration injection..."
        
        # Create the configuration injection using echo commands
        echo "Creating configuration injection..."
        
        # Inject EmailJS configuration directly into email-config.js
        echo "Injecting EmailJS configuration into email-config.js..."
        
        # Create the configuration injection using echo commands
        echo "// EmailJS configuration - injected by GitHub Actions" > temp_config.js
        echo "window.EMAIL_CONFIG = {" >> temp_config.js
        echo "    EMAILJS_SERVICE_ID: '$EMAILJS_SERVICE_ID'," >> temp_config.js
        echo "    EMAILJS_TEMPLATE_ID: '$EMAILJS_TEMPLATE_ID'," >> temp_config.js
        echo "    EMAILJS_PUBLIC_KEY: '$EMAILJS_PUBLIC_KEY'" >> temp_config.js
        echo "};" >> temp_config.js
        echo "" >> temp_config.js
        cat config/email-config.js >> temp_config.js
        
        # Create backup and replace
        cp config/email-config.js config/email-config.js.backup
        mv temp_config.js config/email-config.js
        
        # Verify the replacement worked
        echo "=== Verifying file replacement ==="
        echo "Original file backup size:" && wc -l config/email-config.js.backup
        echo "Modified file size:" && wc -l config/email-config.js
        echo "First 5 lines of modified file:"
        head -5 config/email-config.js
        
        echo "Updated email-config.js with configuration:"
        head -10 config/email-config.js
        
        # Verify configuration was injected successfully
        if grep -q "window.EMAIL_CONFIG" config/email-config.js; then
          echo "✅ EmailJS configuration injected into email-config.js successfully!"
          echo "Configuration preview:"
          head -8 config/email-config.js
        else
          echo "❌ Failed to inject configuration"
          ls -la config/
          exit 1
        fi
      env:
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
    
    - name: List files to be deployed
      run: |
        echo "=== All files in repository ==="
        find . -type f -not -path "./.git/*" | sort
        echo "=== Config files specifically ==="
        find . -name "*.js" -path "./config/*"
        echo "=== Checking config directory ==="
        ls -la config/ || echo "config directory not found"
        echo "=== Contents of email-secrets.js ==="
        cat config/email-secrets.js || echo "email-secrets.js not found"
        echo "=== Working directory ==="
        pwd
        ls -la
    
    - name: Verify files before deployment
      run: |
        echo "=== Final verification before deployment ==="
        echo "Config directory exists:" && ls -la config/
        echo "Email config file (first 15 lines):" && head -15 config/email-config.js
        echo "=== Checking for EMAIL_CONFIG in file ==="
        grep -n "EMAIL_CONFIG" config/email-config.js || echo "EMAIL_CONFIG not found!"
        echo "=== File size check ==="
        wc -l config/email-config.js
        echo "All files to deploy:" && find . -type f -not -path "./.git/*" | grep -E "\.(html|css|js|png|jpg|svg|pdf|ico)$" | sort
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        keep_files: false
        force_orphan: true
    
    - name: Verify deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "=== Deployment completed ==="
        echo "Waiting for GitHub Pages to update..."
        sleep 30
        echo "Testing deployed config file..."
        curl -s "https://portfolio.theguywiththedogs.dev/config/email-config.js" | head -10 || echo "Could not fetch deployed file yet"
