name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
        
    - name: Inject EmailJS configuration securely
      run: |
        echo "üîë Injecting EmailJS configuration directly into HTML..."
        
        # Verify secrets exist
        test -n "${{ secrets.EMAILJS_SERVICE_ID }}"  || (echo "‚ùå Missing EMAILJS_SERVICE_ID" && exit 1)
        test -n "${{ secrets.EMAILJS_TEMPLATE_ID }}" || (echo "‚ùå Missing EMAILJS_TEMPLATE_ID" && exit 1)
        test -n "${{ secrets.EMAILJS_PUBLIC_KEY }}"  || (echo "‚ùå Missing EMAILJS_PUBLIC_KEY"  && exit 1)

        # Create secure inline configuration in HTML
        # This prevents direct access to credentials via separate file
        
        # Use a simpler approach to inject configuration
        SERVICE_ID="${{ secrets.EMAILJS_SERVICE_ID }}"
        TEMPLATE_ID="${{ secrets.EMAILJS_TEMPLATE_ID }}"
        PUBLIC_KEY="${{ secrets.EMAILJS_PUBLIC_KEY }}"
        
        # Replace placeholder in HTML with actual configuration
        # First, create the replacement text
        REPLACEMENT="    <script>\\
        \/\/ EmailJS configuration - injected securely during build\\
        window.EMAIL_CONFIG = {\\
          EMAILJS_SERVICE_ID: '${SERVICE_ID}',\\
          EMAILJS_TEMPLATE_ID: '${TEMPLATE_ID}',\\
          EMAILJS_PUBLIC_KEY: '${PUBLIC_KEY}'\\
        };\\
        console.log('EmailJS configuration loaded securely');\\
        window.EMAIL_CONFIG_LOADED = true;\\
        window.dispatchEvent(new Event('emailConfigLoaded'));\\
    <\/script>"
        
        # Insert the configuration before </head>
        sed -i "s|<!-- EmailJS configuration will be injected here by GitHub Actions -->|${REPLACEMENT}|" index.html
        
        echo "‚úÖ EmailJS configuration injected securely into HTML"
        echo "üîí No separate file created - credentials not directly accessible"

    - name: Cache-bust scripts
      run: |
        echo "üîÑ Adding cache-busting..."
        sed -i "s/__BUILD__/${{ github.run_number }}/g" index.html
        echo "‚úÖ Cache-busting applied"
    
    - name: Prepare site for deployment
      run: |
        echo "üì¶ Preparing site for deployment..."
        
        # Create clean build directory
        mkdir -p _site
        
        # Copy all files to _site
        rsync -av --exclude='_site' --exclude='.git' --exclude='.github' --exclude='node_modules' . _site/
        
        # Verify critical files exist
        echo "üîç Verifying build..."
        
        if [ ! -f "_site/index.html" ]; then
          echo "‚ùå index.html missing from build"
          exit 1
        fi
        
        # Check if EmailJS configuration is properly injected in HTML
        if grep -q "window.EMAIL_CONFIG" "_site/index.html"; then
          echo "‚úÖ EmailJS configuration found in HTML"
        else
          echo "‚ùå EmailJS configuration missing from HTML"
          exit 1
        fi
        
        if [ ! -f "_site/config/email-config.js" ]; then
          echo "‚ùå email-config.js missing from build"  
          exit 1
        fi
        
        echo "‚úÖ Build verification passed"
        echo "üìÅ Config files included:"
        find _site -name "*.js" | grep -E "(email|config)" | sort
        echo "üîí EmailJS credentials securely embedded in HTML (not accessible as separate file)"

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Verify deployment
      run: |
        echo "üöÄ Deployment completed!"
        echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
        
        # Wait a bit for deployment to propagate
        echo "‚è≥ Waiting for deployment to propagate..."
        sleep 15
        
        # Test key files
        echo "üß™ Testing deployed files..."
        
        if curl -f -s "https://portfolio.theguywiththedogs.dev/config/email-config.js" > /dev/null; then
          echo "‚úÖ email-config.js is accessible"
        else
          echo "‚ùå email-config.js is NOT accessible"
        fi
        
        # Verify that email-secrets.js is NOT accessible (security check)
        if curl -f -s "https://portfolio.theguywiththedogs.dev/config/email-secrets.js" > /dev/null; then
          echo "‚ö†Ô∏è WARNING: email-secrets.js is accessible (security risk!)"
        else
          echo "‚úÖ SECURE: email-secrets.js is not directly accessible"
        fi
        
        # Test that HTML contains configuration
        if curl -s "https://portfolio.theguywiththedogs.dev/" | grep -q "window.EMAIL_CONFIG"; then
          echo "‚úÖ EmailJS configuration embedded in HTML"
        else
          echo "‚ùå EmailJS configuration missing from HTML"
        fi
        
        echo "üéâ Deployment verification complete!"