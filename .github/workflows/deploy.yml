name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm install
        fi
        
    - name: Inject EmailJS Configuration
      run: |
        echo "=== EmailJS Configuration Injection ==="
        echo "Checking secrets availability..."
        
        if [ -z "$EMAILJS_SERVICE_ID" ]; then
          echo "❌ EMAILJS_SERVICE_ID is missing"
          exit 1
        else
          echo "✅ EMAILJS_SERVICE_ID is available (length: ${#EMAILJS_SERVICE_ID})"
        fi
        
        if [ -z "$EMAILJS_TEMPLATE_ID" ]; then
          echo "❌ EMAILJS_TEMPLATE_ID is missing"
          exit 1
        else
          echo "✅ EMAILJS_TEMPLATE_ID is available (length: ${#EMAILJS_TEMPLATE_ID})"
        fi
        
        if [ -z "$EMAILJS_PUBLIC_KEY" ]; then
          echo "❌ EMAILJS_PUBLIC_KEY is missing"
          exit 1
        else
          echo "✅ EMAILJS_PUBLIC_KEY is available (length: ${#EMAILJS_PUBLIC_KEY})"
        fi
        
        echo "Creating configuration injection..."
        
        # Create the config script (properly escaped for JSON)
        CONFIG_JSON="{\"EMAILJS_SERVICE_ID\":\"$EMAILJS_SERVICE_ID\",\"EMAILJS_TEMPLATE_ID\":\"$EMAILJS_TEMPLATE_ID\",\"EMAILJS_PUBLIC_KEY\":\"$EMAILJS_PUBLIC_KEY\"}"
        
        # Create config script block
        CONFIG_BLOCK="    <script>window.EMAIL_CONFIG = $CONFIG_JSON;</script>"
        
        echo "Injecting configuration into index.html..."
        
        # Debug: Show the target line we're looking for
        echo "Target line to replace:"
        grep -n "@emailjs/browser" index.html || {
          echo "❌ EmailJS script line not found!"
          exit 1
        }
        
        # Create a temporary file with the injection
        # Find the line number of the EmailJS script
        LINE_NUM=$(grep -n "@emailjs/browser" index.html | cut -d: -f1)
        echo "Found EmailJS script at line: $LINE_NUM"
        
        if [ -z "$LINE_NUM" ]; then
          echo "❌ Could not determine line number!"
          exit 1
        fi
        
        # Insert the config before that line
        echo "Creating temporary file with injection..."
        head -n $((LINE_NUM - 1)) index.html > temp_index.html || {
          echo "❌ Failed to create first part of file"
          exit 1
        }
        
        echo "$CONFIG_BLOCK" >> temp_index.html || {
          echo "❌ Failed to add config block"
          exit 1
        }
        
        tail -n +$LINE_NUM index.html >> temp_index.html || {
          echo "❌ Failed to add remaining content"
          exit 1
        }
        
        # Verify temp file exists and has content
        if [ ! -s temp_index.html ]; then
          echo "❌ Temporary file is empty or missing"
          exit 1
        fi
        
        # Replace original file
        mv temp_index.html index.html || {
          echo "❌ Failed to replace original file"
          exit 1
        }
        
        # Verify injection
        if grep -q "window.EMAIL_CONFIG" index.html; then
          echo "✅ EmailJS configuration injected successfully!"
          grep -n "EMAIL_CONFIG" index.html
        else
          echo "❌ Failed to inject configuration"
          echo "Current EmailJS script line:"
          grep -n "emailjs/browser" index.html
          exit 1
        fi
      env:
        EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
        EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
    
    - name: List files to be deployed
      run: |
        echo "=== Files that will be deployed ==="
        find . -type f -not -path "./.git/*" | head -20
        echo "=== Checking specific files ==="
        ls -la favicon.ico || echo "favicon.ico not found"
        ls -la images/ || echo "images directory not found"
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        keep_files: false
        force_orphan: true
